{"version":3,"file":"db.js","sources":["../src/db.js"],"sourcesContent":["/**\n * @wearegenki/db\n * Vue + vuex plugin for reactive PouchDB (in a web worker)\n * @author: Max Milton <max@wearegenki.com>\n *\n * Copyright 2017 We Are Genki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// NOTE: Web worker communication sent as a JSON string for better performance\n\n// TODO: Logic to handle sync state in vuex OR remove this functionality\n\n// TODO: Use a SharedWorker so that there's only one worker shared between all\n// tabs (minimise perf cost of db sync etc.)\n//  ↳ Will need to make sure message ID (sequence) is unique between all tabs\n//    ↳ Actually it may not be necessary, each tab will get a unique port (if\n//      I understand correctly...)\n//  ↳ https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker\n//  ↳ Need to test if this will slow things down when multiple tabs are trying\n//    to run db queries at the same time\n\n// TODO: Enable support for couchbase bulkDocs API\n//  ↳ REF: https://github.com/pouchdb/pouchdb/pull/6660\n\nimport Vue from 'vue'; // eslint-disable-line\n\nlet sequence = 0;\n// use Map for better performance (in Chrome, other browsers too as they optimise Map)\nconst resolves = new Map();\nconst rejects = new Map();\n\n// vue plugin install hook\nfunction install(VueInstance) {\n  // inject plugin into Vue instances as $db\n  function inject() {\n    const options = this.$options;\n    if (options.db) {\n      this.$db = options.db;\n    } else if (options.parent && options.parent.$db) {\n      this.$db = options.parent.$db;\n    }\n  }\n  const usesInit = VueInstance.config._lifecycleHooks.indexOf('init') > -1;\n  VueInstance.mixin(usesInit ? { init: inject } : { beforeCreate: inject });\n}\n\nclass Database {\n  constructor({\n    Worker,\n    local = 'app',\n    remote,\n    filter,\n    vuexStore,\n    queries = [],\n    namespace = 'db',\n    sync = true,\n    debug,\n  }) {\n    this.vuexStore = vuexStore;\n    this.namespace = namespace;\n    this.worker = new Worker();\n    this.opts = { local, remote, filter, queries, namespace, sync, debug };\n    this._init();\n  }\n\n  _init() {\n    // set up vuex store\n    if (this.vuexStore !== undefined) {\n      this.vuexStore.registerModule(this.namespace, {\n        namespaced: true,\n        // state: {\n        //   syncState: 'online', // online, offline, paused, error\n        // },\n        mutations: {\n          /* eslint-disable no-return-assign */\n          // setSyncState: (state, syncState) => state.syncState = syncState,\n          addQuery: (state, payload) => Vue.set(state, payload.key, {}),\n          removeQuery: (state, payload) => Vue.delete(state, payload.key),\n          setQueryResult: (state, payload) => state[payload.key] = payload.data,\n          /* eslint-enable no-return-assign */\n        },\n        // actions: {\n        //   // use an action to change sync state to allow for custom functionality in future\n        //   changeSyncState({ commit }, newState) {\n        //     commit('setSyncState', newState);\n        //   },\n        // },\n      });\n    }\n\n    // send options to initialise PouchDB in dedicated web worker thread\n    this.worker.postMessage(JSON.stringify(this.opts));\n\n    // handle web worker events\n    this.worker.addEventListener('message', this._receive.bind(this));\n    this.worker.addEventListener('error', (err) => { throw new Error(err); });\n  }\n\n  /**\n   * Standard PouchDB methods\n   */\n\n  get = docId => this._send('get', docId)\n\n  put = doc => this._send('put', doc)\n\n  post = doc => this._send('post', doc)\n\n  remove = doc => this._send('remove', doc)\n\n  allDocs = docs => this._send('allDocs', docs)\n\n  bulkDocs = (docs, opts) => this._send('bulkDocs', docs, opts)\n\n  revsDiff = diff => this._send('revsDiff', diff)\n\n  changes = opts => this._send('changes', opts)\n\n  compact = () => this._send('compact')\n\n  /**\n   * Additional methods\n   */\n\n  /**\n   * Wait until a doc is available in the local database\n   * @param {(string|Array.<string>)} docId - The doc _id or array of _ids to wait for\n   * @param {Boolean} [newOnly] - Don't check in existing docs; only react to incoming doc changes\n   * @param {number} [timeout] - How long to wait before giving up in milliseconds (default = 45s)\n   * @returns {Promise} - Containing the docId\n   */\n  waitUntil = (docId, newOnly, timeout = 45e3) => this._send('waitUntil', docId, newOnly, timeout)\n\n  /**\n   * Register a new reactive database query (keep the number of registered queries to a minimum!)\n   * @param {(Object|string)} query - Query object or doc _id string to watch for changes\n   * @param {string} [key] - Name of the vuex object key (for queries, otherwise doc _id)\n   */\n  register = (query, key) => this.worker.postMessage(JSON.stringify({ register: { query, key }}))\n\n  /**\n   * Unregister a previously registered reactive query\n   * @param {(string|number)} key - The returned key generated by register()\n   * @param {Boolean} [isDoc] - Specific if the query is a doc as we can't infer it like\n   */\n  unregister = (key, isDoc) => this.worker.postMessage(JSON.stringify({ unregister: { key, isDoc }}))\n\n  /**\n   * Generate a doc revision ID\n   * @returns {Promise} - The doc revision ID string\n   */\n  rev = () => this._send('rev')\n\n  /**\n   * Get an MD5 hash\n   * @param {string} string - The input you want hashed\n   * @returns {Promise} - Resulting MD5 hash\n   */\n  md5 = string => this._send('md5', string)\n\n  /**\n   * Insert doc if new or update doc if it exists\n   * (based on the PouchDB upsert plugin)\n   * @see https://github.com/pouchdb/upsert/blob/master/index.js\n   * @param {string} docId - _id of the doc to edit\n   * @param {Function} diffFun - A function returning the changes requested\n   */\n  async upsert(docId, diffFun) {\n    let doc;\n\n    try {\n      doc = await this.get(docId);\n    } catch (err) {\n      if (err.status !== 404) throw err;\n      doc = {};\n    }\n\n    try {\n      // the user might change the _rev, so save it for posterity\n      const docRev = doc._rev;\n      const newDoc = diffFun(doc);\n\n      if (!newDoc) {\n        // if the diffFun returns falsy, we short-circuit as an optimization\n        return { updated: false, rev: docRev, id: docId };\n      }\n\n      // users aren't allowed to modify these values, so reset them here\n      newDoc._id = docId;\n      newDoc._rev = docRev;\n      return this._tryPut(newDoc, diffFun);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async _tryPut(doc, diffFun) {\n    try {\n      const res = await this.put(doc);\n      return {\n        updated: true,\n        rev: res.rev,\n        id: doc._id,\n      };\n    } catch (err) {\n      if (err.status !== 409) throw err;\n      return this.upsert(doc._id, diffFun);\n    }\n  }\n\n  // outgoing message handler\n  _send(method, ...opts) {\n    sequence += 1;\n    const i = sequence;\n\n    return new Promise((resolve, reject) => {\n      resolves.set(i, resolve);\n      rejects.set(i, reject);\n\n      this.worker.postMessage(JSON.stringify({ [method]: { i, opts }}));\n    });\n  }\n\n  // incoming message event handler\n  _receive(event) {\n    const data = JSON.parse(event.data);\n\n    if (data.i !== undefined) {\n      // resolve or reject promise if message contains res or rej\n      if (data.res !== undefined && resolves.has(data.i)) {\n        resolves.get(data.i)(data.res);\n      } else if (rejects.has(data.i)) {\n        rejects.get(data.i)(data.rej);\n      }\n\n      // clean up promise handlers\n      resolves.delete(data.i);\n      rejects.delete(data.i);\n    } else if (data.commit !== undefined) {\n      // commit new data to vuex\n      this.vuexStore.commit(data.commit, data.data);\n    } else {\n      throw new Error('Unknown event:', event);\n    }\n  }\n}\n\nexport default {\n  install,\n  Database,\n};\n"],"names":["sequence","resolves","Map","rejects","install","VueInstance","inject","options","$options","db","$db","parent","usesInit","config","_lifecycleHooks","indexOf","mixin","Database","docId","_send","doc","docs","opts","diff","newOnly","timeout","query","key","worker","postMessage","JSON","stringify","isDoc","string","vuexStore","namespace","Worker","_init","undefined","registerModule","state","payload","Vue","set","delete","data","addEventListener","_receive","bind","err","Error","upsert","diffFun","get","status","docRev","_rev","newDoc","_id","_tryPut","res","put","rev","method","i","Promise","resolve","reject","event","parse","has","rej","commit"],"mappings":"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"}